{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport { getMergeSortAnimations } from '../MergeSortAnimation/MeargeSortAnimation';\nimport { getQuickSortAnimations } from '../QuickSortAnimation/QuickSortAnimation';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = value => {\n      this.setState({\n        size: value\n      });\n    };\n\n    this.resetArray = value => {\n      const array = [];\n\n      for (let i = 0; i < value; i++) {\n        array.push(randomIntFromInterval(5, 700));\n      }\n\n      this.setState({\n        array,\n        color: 'green'\n      });\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      for (let i = 0; i < arrayBars.length; i++) {\n        arrayBars[i].style.backgroundColor = this.state.color;\n      }\n    };\n\n    this.mergeSort = () => {\n      const {\n        array,\n        size\n      } = this.state;\n      const animations = getMergeSortAnimations(array);\n\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          console.log(\"margeSort\", barOneIdx, barTwoIdx, animations[i]);\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? 'red' : 'turquoise';\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * 500 / size);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * 500 / size);\n        }\n      }\n    };\n\n    this.quickSort = () => {\n      const {\n        array,\n        size\n      } = this.state;\n      const animations = getQuickSortAnimations(array);\n\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        console.log(\"arrayBars\", arrayBars);\n        const isColorChange = i % 4 < 2;\n\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          console.log(barOneIdx, barTwoIdx, animations[i]);\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 4 === 0 ? 'red' : 'turquoise';\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * 500 / size);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * 500 / size);\n        }\n      }\n    };\n\n    this.state = {\n      array: [],\n      size: 5,\n      color: 'red'\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.size);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let {\n      size\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Buttons, {\n      resetArray: this.resetArray,\n      mergeSort: this.mergeSort,\n      quickSort: this.quickSort,\n      volume: size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }, \"Size range\"), /*#__PURE__*/React.createElement(SizeRange, {\n      state: this.state,\n      resetArray: this.resetArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`,\n        width: `${600 / size}px`,\n        background: this.state.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} //https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/SortingVisualizer/SortingVisualizer.js"],"names":["React","SizeRange","Buttons","getMergeSortAnimations","getQuickSortAnimations","SortingVisualizer","Component","constructor","props","handleOnChange","value","setState","size","resetArray","array","i","push","randomIntFromInterval","color","arrayBars","document","getElementsByClassName","length","style","backgroundColor","state","mergeSort","animations","isColorChange","barOneIdx","barTwoIdx","console","log","barOneStyle","barTwoStyle","setTimeout","newHeight","height","quickSort","componentDidMount","render","map","idx","width","background","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport {getMergeSortAnimations} from '../MergeSortAnimation/MeargeSortAnimation';\nimport { getQuickSortAnimations } from '../QuickSortAnimation/QuickSortAnimation'\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tsize: 5,\n\t\t\tcolor: 'red',\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tthis.resetArray(this.state.size);\n\t}\n\n\thandleOnChange = (value) => {\n\t\tthis.setState({size: value})\n\t}\n\n\tresetArray = (value) => {\n\t\tconst array = [];\n\t\tfor (let i = 0; i< value; i++){\n\t\t\tarray.push(randomIntFromInterval(5, 700));\n\t\t}\n\t\tthis.setState({array, color: 'green'});\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\tfor (let i = 0; i < arrayBars.length; i++){\n\t\t\tarrayBars[i].style.backgroundColor = this.state.color;\n\t\t}\n\t}\n\n\tmergeSort = () => {\n\t\tconst {array, size} = this.state;\n\t\tconst animations = getMergeSortAnimations(array);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconst isColorChange = i % 3 !== 2;\n\t\t\tif (isColorChange) {\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\n\t\t\t\tconsole.log(\"margeSort\", barOneIdx, barTwoIdx, animations[i]);\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst color = i % 3 === 0 ? 'red' : 'turquoise';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t} else {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t}\n\t\t}\n\t}\n\n\tquickSort = () => {\n\t\tconst { array, size } = this.state;\n\t\tconst animations = getQuickSortAnimations(array);\n\t\tfor (let i = 0; i < animations.length; i++){\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconsole.log(\"arrayBars\", arrayBars);\n\t\t\tconst isColorChange = i % 4 < 2;\n\t\t\tif (isColorChange){\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\n\t\t\t\tconsole.log(barOneIdx, barTwoIdx, animations[i]);\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst color = i % 4 === 0 ? 'red' : 'turquoise';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t} else {\n\t\t\t\tsetTimeout(() => {\t\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t}\n\t\t}\n\t}\n\n\n\trender() {\n\t\tconst {array} = this.state;\n\t\tlet { size } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Buttons resetArray={this.resetArray} mergeSort = {this.mergeSort} quickSort = {this.quickSort} volume={size}/>\n\t\t\t\t<h2>Size range</h2>\n\t\t\t\t<SizeRange state={this.state} resetArray={this.resetArray} />\n\t\t\t\t<div className=\"array-container\">\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tarray.map((value, idx) => (\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div  \n\t\t\t\t\t\t\t\t\t\t\tclassName=\"array-bar\" \n\t\t\t\t\t\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\t\t\t\t\t\tstyle={{height: `${value}px`, width: `${600/size}px`, background: this.state.color}}></div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction randomIntFromInterval(min, max) {\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\n}\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}