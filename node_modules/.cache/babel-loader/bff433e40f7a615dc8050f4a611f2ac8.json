{"ast":null,"code":"import{checkAlgo,swap}from\"../SortingComponents/SortingComponents\";export function getHeapSortAnimations(array){var animations=[];if(array.length<=1){return array;}var auxiliaryArray=array.slice();heapSortHelper(auxiliaryArray,array.length,animations);var javaScriptSortedArray=array.slice().sort(function(a,b){return a-b;});array=auxiliaryArray;console.log(\"alog is Correct(Heap Sort)? \",checkAlgo(array,javaScriptSortedArray));return animations;}function heapSortHelper(auxiliaryArray,arrLength,animations){// Build a maxheap\nvar midIdx=Math.floor(arrLength/2-1);for(var i=midIdx;i>=0;i--){heapify(auxiliaryArray,arrLength,i,animations);}// One by one  extract elements\nfor(var _i=arrLength-1;_i>0;_i--){animations.push([_i,0]);animations.push([0,_i]);animations.push([_i,auxiliaryArray[0]]);animations.push([0,auxiliaryArray[_i]]);swap(auxiliaryArray,_i,0);heapify(auxiliaryArray,_i,0,animations);}}function heapify(auxiliaryArray,arrLength,current,animations){var largest=current;// Initialize largest as root\nvar left=2*current+1;var right=2*current+2;// Check if left child of root exists and is greater than root\nif(left<arrLength&&auxiliaryArray[current]<auxiliaryArray[left]){largest=left;}// Check if right child of root exists and is greater than root\nif(right<arrLength&&auxiliaryArray[largest]<auxiliaryArray[right]){largest=right;}// Change root, if needed\nif(largest!==current){animations.push([current,largest]);animations.push([largest,current]);animations.push([current,auxiliaryArray[largest]]);animations.push([largest,auxiliaryArray[current]]);swap(auxiliaryArray,current,largest);heapify(auxiliaryArray,arrLength,largest,animations);}}","map":{"version":3,"sources":["F:/Coding/React/Sorting-Algo-Visualizer/src/components/Algorithms/HeapSortAnimation/HeapSortAnimation.js"],"names":["checkAlgo","swap","getHeapSortAnimations","array","animations","length","auxiliaryArray","slice","heapSortHelper","javaScriptSortedArray","sort","a","b","console","log","arrLength","midIdx","Math","floor","i","heapify","push","current","largest","left","right"],"mappings":"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","sourcesContent":["import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getHeapSortAnimations(array){\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\theapSortHelper(auxiliaryArray, array.length, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is Correct(Heap Sort)? \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\nfunction heapSortHelper(auxiliaryArray, arrLength, animations){\r\n\t// Build a maxheap\r\n\tconst midIdx = Math.floor((arrLength / 2) - 1);\r\n\tfor (let i = midIdx; i >= 0; i--){\r\n\t\theapify(auxiliaryArray, arrLength, i, animations);\r\n\t}\r\n\r\n\t// One by one  extract elements\r\n\tfor (let i = arrLength - 1; i > 0; i--){\r\n\t\tanimations.push([i, 0]);\r\n\t\tanimations.push([0, i]);\r\n\t\tanimations.push([i, auxiliaryArray[0]]);\r\n\t\tanimations.push([0, auxiliaryArray[i]])\r\n\t\tswap(auxiliaryArray, i, 0);\r\n\t\theapify(auxiliaryArray, i, 0, animations);\r\n\t}\r\n}\r\nfunction heapify(auxiliaryArray, arrLength, current, animations){\r\n\tlet largest = current; // Initialize largest as root\r\n\tconst left = 2 * current + 1; \r\n\tconst right = 2 * current + 2;\r\n\r\n\t// Check if left child of root exists and is greater than root\r\n\tif (left < arrLength && auxiliaryArray[current] < auxiliaryArray[left]){\r\n\t\tlargest = left;\r\n\t}\r\n\r\n\t// Check if right child of root exists and is greater than root\r\n\tif (right < arrLength && auxiliaryArray[largest] < auxiliaryArray[right]){\r\n\t\tlargest = right;\r\n\t}\r\n\r\n\t// Change root, if needed\r\n\tif (largest !== current){\r\n\t\tanimations.push([current, largest]);\r\n\t\tanimations.push([largest, current]);\r\n\t\tanimations.push([current, auxiliaryArray[largest]]);\r\n\t\tanimations.push([largest, auxiliaryArray[current]]);\r\n        swap(auxiliaryArray, current, largest);\r\n\t\theapify(auxiliaryArray, arrLength, largest, animations);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}