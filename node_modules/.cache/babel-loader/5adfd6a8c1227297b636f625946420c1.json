{"ast":null,"code":"export function getHeapSortAnimation(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  heapSortHelper(auxiliaryArray, array.length, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  array = auxiliaryArray;\n  console.log(\"alog is Correct(Heap Sort)? \", checkAlgo(array, javaScriptSortedArray));\n  return animations;\n}\n\nfunction checkAlgo(array, javaScriptSortedArray) {\n  if (array.length !== javaScriptSortedArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] !== javaScriptSortedArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction swap(array, startIdx, endIdx) {\n  const temp = array[startIdx];\n  array[startIdx] = array[endIdx];\n  array[endIdx] = temp;\n}\n\nfunction heapSortHelper(auxiliaryArray, arrLength, animations) {\n  // Build a maxheap\n  const midIdx = Math.floor(arrLength / 2 - 1);\n\n  for (let i = midIdx; i >= 0; i--) {\n    heapify(auxiliaryArray, arrLength, i, animations);\n  } // One by one  extract elements\n\n\n  for (let i = arrLength - 1; i > 0; i--) {\n    animations.push([i, 0]);\n    animations.push([0, i]);\n    animations.push([i, auxiliaryArray[0]]);\n    animations.push([0, auxiliaryArray[i]]);\n    swap(auxiliaryArray, i, 0);\n    heapify(auxiliaryArray, i, 0, animations);\n  }\n}\n\nfunction heapify(auxiliaryArray, arrLength, current, animations) {\n  let largest = current; // Initialize largest as root\n\n  const left = 2 * current + 1;\n  const right = 2 * current + 2; // Check if left child of root exists and is greater than root\n\n  if (left < arrLength && auxiliaryArray[current] < auxiliaryArray[left]) {\n    largest = left;\n  } // Check if right child of root exists and is greater than root\n\n\n  if (right < arrLength && auxiliaryArray[largest] < auxiliaryArray[right]) {\n    largest = right;\n  } // Change root, if needed\n\n\n  if (largest !== current) {\n    animations.push([current, largest]);\n    animations.push([largest, current]);\n    animations.push([current, auxiliaryArray[largest]]);\n    animations.push([largest, auxiliaryArray[current]]);\n    swap(auxiliaryArray, current, largest);\n    heapify(auxiliaryArray, arrLength, largest, animations);\n  }\n}","map":{"version":3,"sources":["/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/HeapSortAnimation/HeapSortAnimation.js"],"names":["getHeapSortAnimation","array","animations","length","auxiliaryArray","slice","heapSortHelper","javaScriptSortedArray","sort","a","b","console","log","checkAlgo","i","swap","startIdx","endIdx","temp","arrLength","midIdx","Math","floor","heapify","push","current","largest","left","right"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,KAA9B,EAAoC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAsB;AACrB,WAAOF,KAAP;AACA;;AACD,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,cAAc,CAACF,cAAD,EAAiBH,KAAK,CAACE,MAAvB,EAA+BD,UAA/B,CAAd;AACA,QAAMK,qBAAqB,GAAGN,KAAK,CAACI,KAAN,GAAcG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACAT,EAAAA,KAAK,GAAGG,cAAR;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CC,SAAS,CAACZ,KAAD,EAAQM,qBAAR,CAArD;AACA,SAAOL,UAAP;AACA;;AAED,SAASW,SAAT,CAAmBZ,KAAnB,EAA0BM,qBAA1B,EAAgD;AAC/C,MAAGN,KAAK,CAACE,MAAN,KAAiBI,qBAAqB,CAACJ,MAA1C,EAAiD;AAChD,WAAO,KAAP;AACA;;AACD,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACE,MAA1B,EAAkCW,CAAC,EAAnC,EAAsC;AACrC,QAAIb,KAAK,CAACa,CAAD,CAAL,KAAaP,qBAAqB,CAACO,CAAD,CAAtC,EAA0C;AACzC,aAAO,KAAP;AACA;AACD;;AACD,SAAO,IAAP;AACA;;AAED,SAASC,IAAT,CAAcd,KAAd,EAAqBe,QAArB,EAA+BC,MAA/B,EAAsC;AACrC,QAAMC,IAAI,GAAGjB,KAAK,CAACe,QAAD,CAAlB;AACAf,EAAAA,KAAK,CAACe,QAAD,CAAL,GAAkBf,KAAK,CAACgB,MAAD,CAAvB;AACAhB,EAAAA,KAAK,CAACgB,MAAD,CAAL,GAAgBC,IAAhB;AACA;;AAED,SAASZ,cAAT,CAAwBF,cAAxB,EAAwCe,SAAxC,EAAmDjB,UAAnD,EAA8D;AAC7D;AACA,QAAMkB,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAYH,SAAS,GAAG,CAAb,GAAkB,CAA7B,CAAf;;AACA,OAAK,IAAIL,CAAC,GAAGM,MAAb,EAAqBN,CAAC,IAAI,CAA1B,EAA6BA,CAAC,EAA9B,EAAiC;AAChCS,IAAAA,OAAO,CAACnB,cAAD,EAAiBe,SAAjB,EAA4BL,CAA5B,EAA+BZ,UAA/B,CAAP;AACA,GAL4D,CAO7D;;;AACA,OAAK,IAAIY,CAAC,GAAGK,SAAS,GAAG,CAAzB,EAA4BL,CAAC,GAAG,CAAhC,EAAmCA,CAAC,EAApC,EAAuC;AACtCZ,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACV,CAAD,EAAI,CAAJ,CAAhB;AACAZ,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAAC,CAAD,EAAIV,CAAJ,CAAhB;AACAZ,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACV,CAAD,EAAIV,cAAc,CAAC,CAAD,CAAlB,CAAhB;AACAF,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAAC,CAAD,EAAIpB,cAAc,CAACU,CAAD,CAAlB,CAAhB;AACAC,IAAAA,IAAI,CAACX,cAAD,EAAiBU,CAAjB,EAAoB,CAApB,CAAJ;AACAS,IAAAA,OAAO,CAACnB,cAAD,EAAiBU,CAAjB,EAAoB,CAApB,EAAuBZ,UAAvB,CAAP;AACA;AACD;;AACD,SAASqB,OAAT,CAAiBnB,cAAjB,EAAiCe,SAAjC,EAA4CM,OAA5C,EAAqDvB,UAArD,EAAgE;AAC/D,MAAIwB,OAAO,GAAGD,OAAd,CAD+D,CACxC;;AACvB,QAAME,IAAI,GAAG,IAAIF,OAAJ,GAAc,CAA3B;AACA,QAAMG,KAAK,GAAG,IAAIH,OAAJ,GAAc,CAA5B,CAH+D,CAK/D;;AACA,MAAIE,IAAI,GAAGR,SAAP,IAAoBf,cAAc,CAACqB,OAAD,CAAd,GAA0BrB,cAAc,CAACuB,IAAD,CAAhE,EAAuE;AACtED,IAAAA,OAAO,GAAGC,IAAV;AACA,GAR8D,CAU/D;;;AACA,MAAIC,KAAK,GAAGT,SAAR,IAAqBf,cAAc,CAACsB,OAAD,CAAd,GAA0BtB,cAAc,CAACwB,KAAD,CAAjE,EAAyE;AACxEF,IAAAA,OAAO,GAAGE,KAAV;AACA,GAb8D,CAe/D;;;AACA,MAAIF,OAAO,KAAKD,OAAhB,EAAwB;AACvBvB,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACC,OAAD,EAAUC,OAAV,CAAhB;AACAxB,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACE,OAAD,EAAUD,OAAV,CAAhB;AACAvB,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACC,OAAD,EAAUrB,cAAc,CAACsB,OAAD,CAAxB,CAAhB;AACAxB,IAAAA,UAAU,CAACsB,IAAX,CAAgB,CAACE,OAAD,EAAUtB,cAAc,CAACqB,OAAD,CAAxB,CAAhB;AACMV,IAAAA,IAAI,CAACX,cAAD,EAAiBqB,OAAjB,EAA0BC,OAA1B,CAAJ;AACNH,IAAAA,OAAO,CAACnB,cAAD,EAAiBe,SAAjB,EAA4BO,OAA5B,EAAqCxB,UAArC,CAAP;AACA;AACD","sourcesContent":["export function getHeapSortAnimation(array){\n\tconst animations = [];\n\tif (array.length <= 1){\n\t\treturn array;\n\t}\n\tconst auxiliaryArray = array.slice();\n\theapSortHelper(auxiliaryArray, array.length, animations);\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\tarray = auxiliaryArray;\n\tconsole.log(\"alog is Correct(Heap Sort)? \", checkAlgo(array, javaScriptSortedArray))\n\treturn animations;\n}\n\nfunction checkAlgo(array, javaScriptSortedArray){\n\tif(array.length !== javaScriptSortedArray.length){\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < array.length; i++){\n\t\tif (array[i] !== javaScriptSortedArray[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction swap(array, startIdx, endIdx){\n\tconst temp = array[startIdx];\n\tarray[startIdx] = array[endIdx];\n\tarray[endIdx] = temp;\n}\n\nfunction heapSortHelper(auxiliaryArray, arrLength, animations){\n\t// Build a maxheap\n\tconst midIdx = Math.floor((arrLength / 2) - 1);\n\tfor (let i = midIdx; i >= 0; i--){\n\t\theapify(auxiliaryArray, arrLength, i, animations);\n\t}\n\n\t// One by one  extract elements\n\tfor (let i = arrLength - 1; i > 0; i--){\n\t\tanimations.push([i, 0]);\n\t\tanimations.push([0, i]);\n\t\tanimations.push([i, auxiliaryArray[0]]);\n\t\tanimations.push([0, auxiliaryArray[i]])\n\t\tswap(auxiliaryArray, i, 0);\n\t\theapify(auxiliaryArray, i, 0, animations);\n\t}\n}\nfunction heapify(auxiliaryArray, arrLength, current, animations){\n\tlet largest = current; // Initialize largest as root\n\tconst left = 2 * current + 1; \n\tconst right = 2 * current + 2;\n\n\t// Check if left child of root exists and is greater than root\n\tif (left < arrLength && auxiliaryArray[current] < auxiliaryArray[left]){\n\t\tlargest = left;\n\t}\n\n\t// Check if right child of root exists and is greater than root\n\tif (right < arrLength && auxiliaryArray[largest] < auxiliaryArray[right]){\n\t\tlargest = right;\n\t}\n\n\t// Change root, if needed\n\tif (largest !== current){\n\t\tanimations.push([current, largest]);\n\t\tanimations.push([largest, current]);\n\t\tanimations.push([current, auxiliaryArray[largest]]);\n\t\tanimations.push([largest, auxiliaryArray[current]]);\n        swap(auxiliaryArray, current, largest);\n\t\theapify(auxiliaryArray, arrLength, largest, animations);\n\t}\n}"]},"metadata":{},"sourceType":"module"}