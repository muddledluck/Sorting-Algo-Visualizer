{"ast":null,"code":"import{checkAlgo}from\"../SortingComponents/SortingComponents\";export function getMergeSortAnimations(array){var animations=[];if(array.length<=1){return array;}var auxiliaryArray=array.slice();// copy of a main array\nvar javaScriptSortedArray=array.slice().sort(function(a,b){return a-b;});mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);console.log(\"alog is correct(Marge Sort)? \",checkAlgo(array,javaScriptSortedArray));return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx){return;}var middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){var k=startIdx;var i=startIdx;var j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){//Index we are comparing, so we push them once to change their color\nanimations.push([i,j]);// Index we are comparing, so we push them second tiem to revert their color\nanimations.push([i,j]);if(auxiliaryArray[i]<=auxiliaryArray[j]){//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}else{//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}while(i<=middleIdx){//Index we are comparing, so we push them once to change their color\nanimations.push([i,i]);// Index we are comparing, so we push them second tiem to revert their color\nanimations.push([i,i]);// We orverwrite the value at index k in the original array with the value at index i in the auxiliary array\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIdx){//Index we are comparing, so we push them once to change their color\nanimations.push([j,j]);// Index we are comparing, so we push them second tiem to revert their color\nanimations.push([j,j]);// We orverwrite the value at index k in the original array with the value at index j in the auxiliary array\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}","map":{"version":3,"sources":["/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/Algorithms/MergeSortAnimation/MeargeSortAnimation.js"],"names":["checkAlgo","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","javaScriptSortedArray","sort","a","b","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["import { checkAlgo } from \"../SortingComponents/SortingComponents\";\n\nexport function getMergeSortAnimations(array) {\n\tconst animations = [];\n\tif (array.length <= 1){\n\t\treturn array;\n\t}\n\tconst auxiliaryArray = array.slice(); // copy of a main array\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\tconsole.log(\"alog is correct(Marge Sort)? \", checkAlgo(array, javaScriptSortedArray))\n\treturn animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n\tif (startIdx === endIdx){\n\t\treturn;\n\t}\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n\tdoMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n\tlet k = startIdx;\n\tlet i = startIdx;\n\tlet j = middleIdx + 1;\n\twhile(i <= middleIdx && j <= endIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([i, j])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([i, j])\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]){\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\t\tmainArray[k++] = auxiliaryArray[i++]\n\t\t} else {\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\n\t\t}\n\t}\n\twhile (i<=middleIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([i, i])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([i, i])\n\t\t// We orverwrite the value at index k in the original array with the value at index i in the auxiliary array\n\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\tmainArray[k++] = auxiliaryArray[i++];\n\t}\n\twhile(j <= endIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([j, j])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([j, j])\n\t\t// We orverwrite the value at index k in the original array with the value at index j in the auxiliary array\n\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\tmainArray[k++] = auxiliaryArray[j++];\n\t}\n}"]},"metadata":{},"sourceType":"module"}