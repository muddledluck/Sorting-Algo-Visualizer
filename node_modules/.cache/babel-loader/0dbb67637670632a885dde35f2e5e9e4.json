{"ast":null,"code":"export function getQuickSortAnimation(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  quickSortHelper(auxiliaryArray, 0, array.length - 1, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  array = auxiliaryArray;\n  console.log(\"alog is correct? \", checkAlgo(array, javaScriptSortedArray));\n  return [animations, array];\n}\n\nfunction checkAlgo(array, javaScriptSortedArray) {\n  if (array.length !== javaScriptSortedArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] !== javaScriptSortedArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction swap(array, startIdx, endIdx) {\n  const temp = array[startIdx];\n  array[startIdx] = array[endIdx];\n  array[endIdx] = temp;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations) {\n  let pivot;\n\n  if (startIdx < endIdx) {\n    pivot = partition(auxiliaryArray, startIdx, endIdx, animations);\n    quickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\n    quickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\n  }\n}\n\nfunction partition(auxiliaryArray, startIdx, endIdx, animations) {\n  let pivotIdx = randomIntFromInterval(startIdx, endIdx); // Index we are comparing, so we push them once to change their color\n\n  animations.push([pivotIdx, endIdx]); // Index we are comparing, so we push them second time to revert their color\n\n  animations.push([endIdx, pivotIdx]); // Index we are swaping with element\n\n  animations.push([pivotIdx, auxiliaryArray[endIdx]]);\n  animations.push([endIdx, auxiliaryArray[pivotIdx]]);\n  swap(auxiliaryArray, pivotIdx, endIdx);\n  let lessTailIdx = startIdx;\n\n  for (let i = startIdx; i < auxiliaryArray.length; i++) {\n    if (auxiliaryArray[i] < auxiliaryArray[endIdx]) {\n      // Index we are comparing, so we push them once to change their color\n      animations.push([i, lessTailIdx]); // Index we are comparing, so we push them second time to revert their color\n\n      animations.push([i, lessTailIdx]); // Index we are swaping with element\n\n      animations.push([i, auxiliaryArray[lessTailIdx]]);\n      animations.push([lessTailIdx, auxiliaryArray[i]]);\n      swap(auxiliaryArray, i, lessTailIdx);\n      lessTailIdx++;\n    }\n  }\n\n  animations.push([lessTailIdx, endIdx]);\n  animations.push([lessTailIdx, endIdx]);\n  animations.push([lessTailIdx, auxiliaryArray[endIdx]]);\n  swap(auxiliaryArray, lessTailIdx, endIdx);\n  return lessTailIdx;\n}","map":{"version":3,"sources":["/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/QuickSortAnimation/QuickSortAnimation.js"],"names":["getQuickSortAnimation","array","animations","length","auxiliaryArray","slice","quickSortHelper","javaScriptSortedArray","sort","a","b","console","log","checkAlgo","i","swap","startIdx","endIdx","temp","randomIntFromInterval","min","max","Math","floor","random","pivot","partition","pivotIdx","push","lessTailIdx"],"mappings":"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","sourcesContent":["export function getQuickSortAnimation(array) {\n\tconst animations = [];\n\tif (array.length <= 1){\n\t\treturn array;\n\t}\n\tconst auxiliaryArray = array.slice();\n\tquickSortHelper(auxiliaryArray, 0, array.length-1, animations);\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\tarray = auxiliaryArray;\n\tconsole.log(\"alog is correct? \", checkAlgo(array, javaScriptSortedArray))\n\treturn [animations, array];\n}\n\nfunction checkAlgo(array, javaScriptSortedArray){\n\tif (array.length !== javaScriptSortedArray.length){\n\t\treturn false\n\t} \n\tfor(let i = 0; i < array.length; i++){\n\t\tif (array[i] !== javaScriptSortedArray[i]){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunction swap(array, startIdx, endIdx){\n\tconst temp = array[startIdx];\n\tarray[startIdx] = array[endIdx];\n\tarray[endIdx] = temp;\n}\n\nfunction randomIntFromInterval(min, max) {\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\n}\n\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations){\n\tlet pivot;\n\tif(startIdx < endIdx){\n\t\tpivot = partition(auxiliaryArray, startIdx, endIdx, animations);\n\t\tquickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\n\t\tquickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\n\t}\n}\n\nfunction partition(auxiliaryArray, startIdx, endIdx, animations){\n\tlet pivotIdx = randomIntFromInterval(startIdx, endIdx);\n\t// Index we are comparing, so we push them once to change their color\n\tanimations.push([pivotIdx, endIdx]);\n\t// Index we are comparing, so we push them second time to revert their color\n\tanimations.push([endIdx, pivotIdx]);\n\t// Index we are swaping with element\n\tanimations.push([pivotIdx, auxiliaryArray[endIdx]]);\n\tanimations.push([endIdx, auxiliaryArray[pivotIdx]]);\n\n\tswap(auxiliaryArray, pivotIdx, endIdx);\n\n\tlet lessTailIdx = startIdx;\n\n\tfor (let i = startIdx; i< auxiliaryArray.length; i++){\n\t\tif (auxiliaryArray[i] < auxiliaryArray[endIdx]){\n\t\t\t// Index we are comparing, so we push them once to change their color\n\t\t\tanimations.push([i, lessTailIdx]);\n\t\t\t// Index we are comparing, so we push them second time to revert their color\n\t\t\tanimations.push([i, lessTailIdx]);\n\t\t\t// Index we are swaping with element\n\t\t\tanimations.push([i, auxiliaryArray[lessTailIdx]]);\n\t\t\tanimations.push([lessTailIdx, auxiliaryArray[i]]);\n\n\t\t\tswap(auxiliaryArray, i, lessTailIdx);\n\t\t\tlessTailIdx++;\n\t\t}\n\t}\n\tanimations.push([lessTailIdx, endIdx]);\n\tanimations.push([lessTailIdx, endIdx]);\n\tanimations.push([lessTailIdx, auxiliaryArray[endIdx]]);\n\tswap(auxiliaryArray, lessTailIdx, endIdx);\n\treturn lessTailIdx\n}"]},"metadata":{},"sourceType":"module"}