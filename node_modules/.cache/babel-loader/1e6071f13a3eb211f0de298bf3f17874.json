{"ast":null,"code":"import{checkAlgo,swap}from\"../SortingComponents/SortingComponents\";export function getQuickSortAnimations(array){var animations=[];if(array.length<=1){return array;}var auxiliaryArray=array.slice();quickSortHelper(auxiliaryArray,0,array.length-1,animations);var javaScriptSortedArray=array.slice().sort(function(a,b){return a-b;});array=auxiliaryArray;console.log(\"alog is correct?(Quick Sort) \",checkAlgo(array,javaScriptSortedArray));return animations;}function randomIntFromInterval(min,max){return Math.floor(Math.random()*(max-min+1)+min);}function quickSortHelper(auxiliaryArray,startIdx,endIdx,animations){var pivot;if(startIdx<endIdx){pivot=partition(auxiliaryArray,startIdx,endIdx,animations);quickSortHelper(auxiliaryArray,startIdx,pivot-1,animations);quickSortHelper(auxiliaryArray,pivot+1,endIdx,animations);}}function partition(auxiliaryArray,startIdx,endIdx,animations){var pivotIdx=randomIntFromInterval(startIdx,endIdx);// Index we are comparing, so we push them once to change their color\nanimations.push([pivotIdx,endIdx]);// Index we are comparing, so we push them second time to revert their color\nanimations.push([endIdx,pivotIdx]);// Index we are swaping with element\nanimations.push([pivotIdx,auxiliaryArray[endIdx]]);animations.push([endIdx,auxiliaryArray[pivotIdx]]);swap(auxiliaryArray,pivotIdx,endIdx);var lessTailIdx=startIdx;for(var i=startIdx;i<auxiliaryArray.length;i++){if(auxiliaryArray[i]<auxiliaryArray[endIdx]){// Index we are comparing, so we push them once to change their color\nanimations.push([i,lessTailIdx]);// Index we are comparing, so we push them second time to revert their color\nanimations.push([i,lessTailIdx]);// Index we are swaping with element\nanimations.push([i,auxiliaryArray[lessTailIdx]]);animations.push([lessTailIdx,auxiliaryArray[i]]);swap(auxiliaryArray,i,lessTailIdx);lessTailIdx++;}}animations.push([lessTailIdx,endIdx]);animations.push([lessTailIdx,endIdx]);animations.push([lessTailIdx,auxiliaryArray[endIdx]]);animations.push([endIdx,auxiliaryArray[lessTailIdx]]);swap(auxiliaryArray,lessTailIdx,endIdx);return lessTailIdx;}","map":{"version":3,"sources":["F:/Coding/React/Sorting-Algo-Visualizer/src/components/Algorithms/QuickSortAnimation/QuickSortAnimation.js"],"names":["checkAlgo","swap","getQuickSortAnimations","array","animations","length","auxiliaryArray","slice","quickSortHelper","javaScriptSortedArray","sort","a","b","console","log","randomIntFromInterval","min","max","Math","floor","random","startIdx","endIdx","pivot","partition","pivotIdx","push","lessTailIdx","i"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,IAApB,KAAgC,wCAAhC,CAEA,MAAO,SAASC,CAAAA,sBAAT,CAAgCC,KAAhC,CAAuC,CAC7C,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAID,KAAK,CAACE,MAAN,EAAgB,CAApB,CAAsB,CACrB,MAAOF,CAAAA,KAAP,CACA,CACD,GAAMG,CAAAA,cAAc,CAAGH,KAAK,CAACI,KAAN,EAAvB,CACAC,eAAe,CAACF,cAAD,CAAiB,CAAjB,CAAoBH,KAAK,CAACE,MAAN,CAAa,CAAjC,CAAoCD,UAApC,CAAf,CACA,GAAMK,CAAAA,qBAAqB,CAAGN,KAAK,CAACI,KAAN,GAAcG,IAAd,CAAmB,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAAGC,CAAd,EAAnB,CAA9B,CACAT,KAAK,CAAGG,cAAR,CACAO,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAA6Cd,SAAS,CAACG,KAAD,CAAQM,qBAAR,CAAtD,EACA,MAAOL,CAAAA,UAAP,CACA,CAGD,QAASW,CAAAA,qBAAT,CAA+BC,GAA/B,CAAoCC,GAApC,CAAyC,CACxC,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAACD,GAAJ,CAAU,CAA3B,EAAgCA,GAA3C,CAAP,CACA,CAED,QAASR,CAAAA,eAAT,CAAyBF,cAAzB,CAAyCe,QAAzC,CAAmDC,MAAnD,CAA2DlB,UAA3D,CAAsE,CACrE,GAAImB,CAAAA,KAAJ,CACA,GAAGF,QAAQ,CAAGC,MAAd,CAAqB,CACpBC,KAAK,CAAGC,SAAS,CAAClB,cAAD,CAAiBe,QAAjB,CAA2BC,MAA3B,CAAmClB,UAAnC,CAAjB,CACAI,eAAe,CAACF,cAAD,CAAiBe,QAAjB,CAA2BE,KAAK,CAAG,CAAnC,CAAsCnB,UAAtC,CAAf,CACAI,eAAe,CAACF,cAAD,CAAiBiB,KAAK,CAAG,CAAzB,CAA4BD,MAA5B,CAAoClB,UAApC,CAAf,CACA,CACD,CAED,QAASoB,CAAAA,SAAT,CAAmBlB,cAAnB,CAAmCe,QAAnC,CAA6CC,MAA7C,CAAqDlB,UAArD,CAAgE,CAC/D,GAAIqB,CAAAA,QAAQ,CAAGV,qBAAqB,CAACM,QAAD,CAAWC,MAAX,CAApC,CACA;AACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACD,QAAD,CAAWH,MAAX,CAAhB,EACA;AACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACJ,MAAD,CAASG,QAAT,CAAhB,EACA;AACArB,UAAU,CAACsB,IAAX,CAAgB,CAACD,QAAD,CAAWnB,cAAc,CAACgB,MAAD,CAAzB,CAAhB,EACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACJ,MAAD,CAAShB,cAAc,CAACmB,QAAD,CAAvB,CAAhB,EAEAxB,IAAI,CAACK,cAAD,CAAiBmB,QAAjB,CAA2BH,MAA3B,CAAJ,CAEA,GAAIK,CAAAA,WAAW,CAAGN,QAAlB,CAEA,IAAK,GAAIO,CAAAA,CAAC,CAAGP,QAAb,CAAuBO,CAAC,CAAEtB,cAAc,CAACD,MAAzC,CAAiDuB,CAAC,EAAlD,CAAqD,CACpD,GAAItB,cAAc,CAACsB,CAAD,CAAd,CAAoBtB,cAAc,CAACgB,MAAD,CAAtC,CAA+C,CAC9C;AACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACE,CAAD,CAAID,WAAJ,CAAhB,EACA;AACAvB,UAAU,CAACsB,IAAX,CAAgB,CAACE,CAAD,CAAID,WAAJ,CAAhB,EACA;AACAvB,UAAU,CAACsB,IAAX,CAAgB,CAACE,CAAD,CAAItB,cAAc,CAACqB,WAAD,CAAlB,CAAhB,EACAvB,UAAU,CAACsB,IAAX,CAAgB,CAACC,WAAD,CAAcrB,cAAc,CAACsB,CAAD,CAA5B,CAAhB,EAEA3B,IAAI,CAACK,cAAD,CAAiBsB,CAAjB,CAAoBD,WAApB,CAAJ,CACAA,WAAW,GACX,CACD,CACDvB,UAAU,CAACsB,IAAX,CAAgB,CAACC,WAAD,CAAcL,MAAd,CAAhB,EACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACC,WAAD,CAAcL,MAAd,CAAhB,EACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACC,WAAD,CAAcrB,cAAc,CAACgB,MAAD,CAA5B,CAAhB,EACAlB,UAAU,CAACsB,IAAX,CAAgB,CAACJ,MAAD,CAAShB,cAAc,CAACqB,WAAD,CAAvB,CAAhB,EACA1B,IAAI,CAACK,cAAD,CAAiBqB,WAAjB,CAA8BL,MAA9B,CAAJ,CACA,MAAOK,CAAAA,WAAP,CACA","sourcesContent":["import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getQuickSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\tquickSortHelper(auxiliaryArray, 0, array.length-1, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is correct?(Quick Sort) \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\n\r\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivot;\r\n\tif(startIdx < endIdx){\r\n\t\tpivot = partition(auxiliaryArray, startIdx, endIdx, animations);\r\n\t\tquickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\r\n\t\tquickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\r\n\t}\r\n}\r\n\r\nfunction partition(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivotIdx = randomIntFromInterval(startIdx, endIdx);\r\n\t// Index we are comparing, so we push them once to change their color\r\n\tanimations.push([pivotIdx, endIdx]);\r\n\t// Index we are comparing, so we push them second time to revert their color\r\n\tanimations.push([endIdx, pivotIdx]);\r\n\t// Index we are swaping with element\r\n\tanimations.push([pivotIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[pivotIdx]]);\r\n\r\n\tswap(auxiliaryArray, pivotIdx, endIdx);\r\n\r\n\tlet lessTailIdx = startIdx;\r\n\r\n\tfor (let i = startIdx; i< auxiliaryArray.length; i++){\r\n\t\tif (auxiliaryArray[i] < auxiliaryArray[endIdx]){\r\n\t\t\t// Index we are comparing, so we push them once to change their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are comparing, so we push them second time to revert their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are swaping with element\r\n\t\t\tanimations.push([i, auxiliaryArray[lessTailIdx]]);\r\n\t\t\tanimations.push([lessTailIdx, auxiliaryArray[i]]);\r\n\r\n\t\t\tswap(auxiliaryArray, i, lessTailIdx);\r\n\t\t\tlessTailIdx++;\r\n\t\t}\r\n\t}\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[lessTailIdx]]);\r\n\tswap(auxiliaryArray, lessTailIdx, endIdx);\r\n\treturn lessTailIdx\r\n}"]},"metadata":{},"sourceType":"module"}