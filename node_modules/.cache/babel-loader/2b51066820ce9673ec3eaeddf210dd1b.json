{"ast":null,"code":"import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice(); // copy of a main array\n\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  console.log(\"alog is correct(Marge Sort)? \", checkAlgo(array, javaScriptSortedArray));\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    //Index we are comparing, so we push them once to change their color\n    animations.push([i, j]); // Index we are comparing, so we push them second tiem to revert their color\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    //Index we are comparing, so we push them once to change their color\n    animations.push([i, i]); // Index we are comparing, so we push them second tiem to revert their color\n\n    animations.push([i, i]); // We orverwrite the value at index k in the original array with the value at index i in the auxiliary array\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    //Index we are comparing, so we push them once to change their color\n    animations.push([j, j]); // Index we are comparing, so we push them second tiem to revert their color\n\n    animations.push([j, j]); // We orverwrite the value at index k in the original array with the value at index j in the auxiliary array\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/home/kali/Desktop/Project/Sorting-Algo-Visualizer/src/components/MergeSortAnimation/MeargeSortAnimation.js"],"names":["checkAlgo","swap","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","javaScriptSortedArray","sort","a","b","mergeSortHelper","console","log","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\n\nexport function getMergeSortAnimations(array) {\n\tconst animations = [];\n\tif (array.length <= 1){\n\t\treturn array;\n\t}\n\tconst auxiliaryArray = array.slice(); // copy of a main array\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\tconsole.log(\"alog is correct(Marge Sort)? \", checkAlgo(array, javaScriptSortedArray))\n\treturn animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n\tif (startIdx === endIdx){\n\t\treturn;\n\t}\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n\tdoMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n\tlet k = startIdx;\n\tlet i = startIdx;\n\tlet j = middleIdx + 1;\n\twhile(i <= middleIdx && j <= endIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([i, j])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([i, j])\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]){\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\t\tmainArray[k++] = auxiliaryArray[i++]\n\t\t} else {\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\n\t\t}\n\t}\n\twhile (i<=middleIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([i, i])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([i, i])\n\t\t// We orverwrite the value at index k in the original array with the value at index i in the auxiliary array\n\t\tanimations.push([k, auxiliaryArray[i]]);\n\t\tmainArray[k++] = auxiliaryArray[i++];\n\t}\n\twhile(j <= endIdx){\n\t\t//Index we are comparing, so we push them once to change their color\n\t\tanimations.push([j, j])\n\t\t// Index we are comparing, so we push them second tiem to revert their color\n\t\tanimations.push([j, j])\n\t\t// We orverwrite the value at index k in the original array with the value at index j in the auxiliary array\n\t\tanimations.push([k, auxiliaryArray[j]]);\n\t\tmainArray[k++] = auxiliaryArray[j++];\n\t}\n}"]},"metadata":{},"sourceType":"module"}