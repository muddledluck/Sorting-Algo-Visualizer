{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport { getMergeSortAnimations } from '../MergeSortAnimation/MeargeSortAnimation';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = value => {\n      this.setState({\n        size: value\n      });\n    };\n\n    this.resetArray = value => {\n      const array = [];\n\n      for (let i = 0; i < value; i++) {\n        array.push(randomIntFromInterval(5, 700));\n      }\n\n      this.setState({\n        array,\n        color: 'green'\n      });\n    };\n\n    this.mergeSort = () => {\n      const {\n        array,\n        size\n      } = this.state;\n      const animations = getMergeSortAnimations(array);\n\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? 'red' : 'turquoise';\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * 500 / size);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * 500 / size);\n        }\n      }\n    };\n\n    this.state = {\n      array: [],\n      size: 5,\n      color: 'green'\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.size);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let {\n      size\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Buttons, {\n      resetArray: this.resetArray,\n      mergeSort: this.mergeSort,\n      volume: size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }, \"Size range\"), /*#__PURE__*/React.createElement(SizeRange, {\n      state: this.state,\n      resetArray: this.resetArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`,\n        width: `${600 / size}px`,\n        background: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} //https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js"],"names":["React","SizeRange","Buttons","getMergeSortAnimations","SortingVisualizer","Component","constructor","props","handleOnChange","value","setState","size","resetArray","array","i","push","randomIntFromInterval","color","mergeSort","state","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","newHeight","height","componentDidMount","render","map","idx","width","background","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport {getMergeSortAnimations} from '../MergeSortAnimation/MeargeSortAnimation'\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tsize: 5,\n\t\t\tcolor: 'green',\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tthis.resetArray(this.state.size);\n\t}\n\n\thandleOnChange = (value) => {\n\t\tthis.setState({size: value})\n\t}\n\n\tresetArray = (value) => {\n\t\tconst array = [];\n\t\tfor (let i = 0; i< value; i++){\n\t\t\tarray.push(randomIntFromInterval(5, 700));\n\t\t}\n\t\tthis.setState({array, color: 'green'});\n\t}\n\n\tmergeSort = () => {\n\t\tconst {array, size} = this.state;\n\t\tconst animations = getMergeSortAnimations(array);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconst isColorChange = i % 3 !== 2;\n\t\t\tif (isColorChange) {\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst color = i % 3 === 0 ? 'red' : 'turquoise';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t} else {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, (i * 500)/size);\n\t\t\t}\n\t\t}\n\t}\n\n\n\trender() {\n\t\tconst {array} = this.state;\n\t\tlet { size } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Buttons resetArray={this.resetArray} mergeSort = {this.mergeSort} volume={size}/>\n\t\t\t\t<h2>Size range</h2>\n\t\t\t\t<SizeRange state={this.state} resetArray={this.resetArray} />\n\t\t\t\t<div className=\"array-container\">\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tarray.map((value, idx) => (\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div  \n\t\t\t\t\t\t\t\t\t\t\tclassName=\"array-bar\" \n\t\t\t\t\t\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\t\t\t\t\t\tstyle={{height: `${value}px`, width: `${600/size}px`, background: 'red'}}></div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction randomIntFromInterval(min, max) {\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\n}\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}