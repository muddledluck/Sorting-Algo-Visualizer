{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport Slider from 'react-rangeslider';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = value => {\n      this.setState({\n        volume: value\n      });\n    };\n\n    this.resetArray = value => {\n      const array = [];\n\n      for (let i = 0; i < value; i++) {\n        array.push(randomIntFromInterval(5, 700));\n      }\n\n      this.setState({\n        array\n      });\n    };\n\n    this.state = {\n      array: [],\n      volume: 400\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.volume);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let {\n      volume\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      bg: \"light\",\n      expand: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mr-3\",\n      onClick: () => this.resetArray(this.state.volume),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"mr-3\",\n      onClick: () => this.resetArray(this.state.volume),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }\n    }, \"Marge Sort\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"mr-3\",\n      onClick: () => this.resetArray(this.state.volume),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 6\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"mr-3\",\n      onClick: () => this.resetArray(this.state.volume),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"mr-3\",\n      onClick: () => this.resetArray(this.state.volume),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }\n    }, \"Bubble Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Slider, {\n      min: 5,\n      max: 400,\n      value: volume,\n      onChange: this.handleOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }\n    }, value)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Slider, {\n      min: 5,\n      max: 400,\n      value: volume,\n      onChange: this.handleOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }\n    }), array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} //https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js"],"names":["React","Navbar","Button","Slider","SortingVisualizer","Component","constructor","props","handleOnChange","value","setState","volume","resetArray","array","i","push","randomIntFromInterval","state","componentDidMount","render","map","idx","height","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport Slider from 'react-rangeslider';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tvolume: 400,\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tthis.resetArray(this.state.volume);\n\t}\n\n\thandleOnChange = (value) => {\n\t\tthis.setState({volume: value})\n\t}\n\n\tresetArray = (value) => {\n\t\tconst array = [];\n\t\tfor (let i = 0; i< value; i++){\n\t\t\tarray.push(randomIntFromInterval(5, 700));\n\t\t}\n\t\tthis.setState({array})\n\t}\n\n\n\trender() {\n\t\tconst {array} = this.state;\n\t\tlet { volume } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t\t\t<Button className=\"mr-3\" onClick={() => this.resetArray(this.state.volume)}>Generate New Array</Button>\n\t\t\t\t\t<Button className=\"mr-3\" onClick={() => this.resetArray(this.state.volume)}>Marge Sort</Button>\n\t\t\t\t\t<Button className=\"mr-3\" onClick={() => this.resetArray(this.state.volume)}>Quick Sort</Button>\n\t\t\t\t\t<Button className=\"mr-3\" onClick={() => this.resetArray(this.state.volume)}>Heap Sort</Button>\n\t\t\t\t\t<Button className=\"mr-3\" onClick={() => this.resetArray(this.state.volume)}>Bubble Sort</Button>\n\t\t\t\t</Navbar>\n\t\t\t\t<div className='slider'>\n\t\t\t\t\t<Slider min={5} max={400} value={volume} onChange={this.handleOnChange}/>\n\t\t\t\t\t<div className='value'>{value}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"array-container\">\n\t\t\t\t\t<Slider min={5} max={400} value={volume} onChange={this.handleOnChange}/>\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tarray.map((value, idx) => (\n\t\t\t\t\t\t\t\t\t\t<div  \n\t\t\t\t\t\t\t\t\t\t\tclassName=\"array-bar\" \n\t\t\t\t\t\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\t\t\t\t\t\tstyle={{height: `${value}px`}}></div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction randomIntFromInterval(min, max) {\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\n}\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}