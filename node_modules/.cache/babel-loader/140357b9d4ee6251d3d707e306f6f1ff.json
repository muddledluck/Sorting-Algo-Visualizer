{"ast":null,"code":"var _jsxFileName = \"/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport { getMergeSortAnimations } from '../MergeSortAnimation/MeargeSortAnimation';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = value => {\n      this.setState({\n        size: value\n      });\n    };\n\n    this.resetArray = value => {\n      const array = [];\n\n      for (let i = 0; i < value; i++) {\n        array.push(randomIntFromInterval(5, 700));\n      }\n\n      this.setState({\n        array\n      });\n    };\n\n    this.state = {\n      array: [],\n      size: 300,\n      animation_speed_ms: 10\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.size);\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.arrya);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const inColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"green\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, this.state.animation_speed_ms);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, this.state.animation_speed_ms);\n      }\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let {\n      size\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Buttons, {\n      resetArray: this.resetArray,\n      mergeSort: this.mergeSort,\n      volume: size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }, \"Size range\"), /*#__PURE__*/React.createElement(SizeRange, {\n      state: this.state,\n      resetArray: this.resetArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`,\n        width: `${500 / size}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} //https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/home/kali/Desktop/Project/sortingvisualizer/src/components/SortingVisualizer/SortingVisualizer.js"],"names":["React","SizeRange","Buttons","getMergeSortAnimations","SortingVisualizer","Component","constructor","props","handleOnChange","value","setState","size","resetArray","array","i","push","randomIntFromInterval","state","animation_speed_ms","componentDidMount","mergeSort","animations","arrya","length","arrayBars","document","getElementsByClassName","inColorChange","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","render","map","idx","width","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SizeRange from '../SizeRange/SizeRange';\nimport Buttons from '../Buttons/Buttons';\nimport {getMergeSortAnimations} from '../MergeSortAnimation/MeargeSortAnimation'\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SortingVisualizer extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tarray: [],\n\t\t\tsize: 300,\n\t\t\tanimation_speed_ms: 10,\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tthis.resetArray(this.state.size);\n\t}\n\n\thandleOnChange = (value) => {\n\t\tthis.setState({size: value})\n\t}\n\n\tresetArray = (value) => {\n\t\tconst array = [];\n\t\tfor (let i = 0; i< value; i++){\n\t\t\tarray.push(randomIntFromInterval(5, 700));\n\t\t}\n\t\tthis.setState({array})\n\t}\n\n\tmergeSort(){\n\t\tconst animations = getMergeSortAnimations(this.state.arrya);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tconst inColorChange = i % 3 !== 2;\n\t\t\tif (isColorChange) {\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\n\t\t\t\tconst color = i % 3 === 0 ? \"red\" : \"green\";\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, this.state.animation_speed_ms);\n\t\t\t} else {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, this.state.animation_speed_ms);\n\t\t\t}\n\t\t}\n\t}\n\n\n\trender() {\n\t\tconst {array} = this.state;\n\t\tlet { size } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Buttons resetArray={this.resetArray} mergeSort = {this.mergeSort} volume={size}/>\n\t\t\t\t<h2>Size range</h2>\n\t\t\t\t<SizeRange state={this.state} resetArray={this.resetArray} />\n\t\t\t\t<div className=\"array-container\">\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tarray.map((value, idx) => (\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div  \n\t\t\t\t\t\t\t\t\t\t\tclassName=\"array-bar\" \n\t\t\t\t\t\t\t\t\t\t\tkey={idx} \n\t\t\t\t\t\t\t\t\t\t\tstyle={{height: `${value}px`, width: `${500/size}px`}}></div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction randomIntFromInterval(min, max) {\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\n}\nexport default SortingVisualizer;"]},"metadata":{},"sourceType":"module"}