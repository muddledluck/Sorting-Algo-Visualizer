{"ast":null,"code":"import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  quickSortHelper(auxiliaryArray, 0, array.length - 1, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  array = auxiliaryArray;\n  console.log(\"alog is correct?(Quick Sort) \", checkAlgo(array, javaScriptSortedArray));\n  return animations;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations) {\n  let pivot;\n\n  if (startIdx < endIdx) {\n    pivot = partition(auxiliaryArray, startIdx, endIdx, animations);\n    quickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\n    quickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\n  }\n}\n\nfunction partition(auxiliaryArray, startIdx, endIdx, animations) {\n  let pivotIdx = randomIntFromInterval(startIdx, endIdx); // Index we are comparing, so we push them once to change their color\n\n  animations.push([pivotIdx, endIdx]); // Index we are comparing, so we push them second time to revert their color\n\n  animations.push([endIdx, pivotIdx]); // Index we are swaping with element\n\n  animations.push([pivotIdx, auxiliaryArray[endIdx]]);\n  animations.push([endIdx, auxiliaryArray[pivotIdx]]);\n  swap(auxiliaryArray, pivotIdx, endIdx);\n  let lessTailIdx = startIdx;\n\n  for (let i = startIdx; i < auxiliaryArray.length; i++) {\n    if (auxiliaryArray[i] < auxiliaryArray[endIdx]) {\n      // Index we are comparing, so we push them once to change their color\n      animations.push([i, lessTailIdx]); // Index we are comparing, so we push them second time to revert their color\n\n      animations.push([i, lessTailIdx]); // Index we are swaping with element\n\n      animations.push([i, auxiliaryArray[lessTailIdx]]);\n      animations.push([lessTailIdx, auxiliaryArray[i]]);\n      swap(auxiliaryArray, i, lessTailIdx);\n      lessTailIdx++;\n    }\n  }\n\n  animations.push([lessTailIdx, endIdx]);\n  animations.push([lessTailIdx, endIdx]);\n  animations.push([lessTailIdx, auxiliaryArray[endIdx]]);\n  animations.push([endIdx, auxiliaryArray[lessTailIdx]]);\n  swap(auxiliaryArray, lessTailIdx, endIdx);\n  return lessTailIdx;\n}","map":{"version":3,"sources":["F:/Coding/React/Sorting-Algo-Visualizer/src/components/Algorithms/QuickSortAnimation/QuickSortAnimation.js"],"names":["checkAlgo","swap","getQuickSortAnimations","array","animations","length","auxiliaryArray","slice","quickSortHelper","javaScriptSortedArray","sort","a","b","console","log","randomIntFromInterval","min","max","Math","floor","random","startIdx","endIdx","pivot","partition","pivotIdx","push","lessTailIdx","i"],"mappings":"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","sourcesContent":["import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getQuickSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\tquickSortHelper(auxiliaryArray, 0, array.length-1, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is correct?(Quick Sort) \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\n\r\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivot;\r\n\tif(startIdx < endIdx){\r\n\t\tpivot = partition(auxiliaryArray, startIdx, endIdx, animations);\r\n\t\tquickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\r\n\t\tquickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\r\n\t}\r\n}\r\n\r\nfunction partition(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivotIdx = randomIntFromInterval(startIdx, endIdx);\r\n\t// Index we are comparing, so we push them once to change their color\r\n\tanimations.push([pivotIdx, endIdx]);\r\n\t// Index we are comparing, so we push them second time to revert their color\r\n\tanimations.push([endIdx, pivotIdx]);\r\n\t// Index we are swaping with element\r\n\tanimations.push([pivotIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[pivotIdx]]);\r\n\r\n\tswap(auxiliaryArray, pivotIdx, endIdx);\r\n\r\n\tlet lessTailIdx = startIdx;\r\n\r\n\tfor (let i = startIdx; i< auxiliaryArray.length; i++){\r\n\t\tif (auxiliaryArray[i] < auxiliaryArray[endIdx]){\r\n\t\t\t// Index we are comparing, so we push them once to change their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are comparing, so we push them second time to revert their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are swaping with element\r\n\t\t\tanimations.push([i, auxiliaryArray[lessTailIdx]]);\r\n\t\t\tanimations.push([lessTailIdx, auxiliaryArray[i]]);\r\n\r\n\t\t\tswap(auxiliaryArray, i, lessTailIdx);\r\n\t\t\tlessTailIdx++;\r\n\t\t}\r\n\t}\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[lessTailIdx]]);\r\n\tswap(auxiliaryArray, lessTailIdx, endIdx);\r\n\treturn lessTailIdx\r\n}"]},"metadata":{},"sourceType":"module"}