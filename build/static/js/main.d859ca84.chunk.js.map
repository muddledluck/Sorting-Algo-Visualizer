{"version":3,"sources":["components/SizeRange/SizeRange.js","components/Buttons/Buttons.js","components/Algorithms/SortingComponents/SortingComponents.js","components/Algorithms/MergeSortAnimation/MeargeSortAnimation.js","components/Algorithms/QuickSortAnimation/QuickSortAnimation.js","components/Algorithms/HeapSortAnimation/HeapSortAnimation.js","components/Algorithms/BubbleSortAnimation/BubbleSortAnimation.js","components/SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","SizeRange","state","resetArray","type","min","max","value","className","onChange","event","size","target","document","getElementById","innerHTML","id","Buttons","mergeSort","quickSort","heapSort","bubbleSort","volume","Navbar","bg","expand","Button","onClick","checkAlgo","array","javaScriptSortedArray","length","i","swap","startIdx","endIdx","temp","getMergeSortAnimations","animations","auxiliaryArray","slice","sort","a","b","mergeSortHelper","mainArray","middleIdx","Math","floor","k","j","push","doMerge","console","log","getQuickSortAnimations","quickSortHelper","pivot","pivotIdx","random","lessTailIdx","partition","getHeapSortAnimations","arrLength","heapify","heapSortHelper","current","largest","left","right","getBubbleSortAnimations","swapped","bubbleSortHelper","SortingVisualizer","props","handleOnChange","setState","color","arrayBars","getElementsByClassName","style","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","newHeight","height","this","map","idx","key","width","background","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d859ca84.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n\r\n`;\r\nconst showValue = (value) => {\r\n    const element = document.getElementById(\"showValue\");\r\n    element.innerHTML = value;\r\n  }\r\nconst SizeRange = ({ state, resetArray }) => {\r\n  \r\n  return(\r\n    <div>\r\n      <Styles>\r\n        <h2>Size Range</h2>\r\n        <input \r\n          type=\"range\" \r\n          min={5} \r\n          max={500} \r\n          value={state.value} \r\n          className=\"slider\" \r\n          onChange={(event) => {\r\n            state.size = event.target.value;\r\n            resetArray(state.size);\r\n            showValue(state.size);\r\n          }} />\r\n          <br></br>\r\n          <span id=\"showValue\">20</span>\r\n      </Styles>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SizeRange\r\n\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Buttons = ({resetArray, mergeSort, quickSort, heapSort, bubbleSort, volume }) => {\r\n\t\treturn (\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Button className=\"mr-3\" onClick={() => resetArray(volume)}>\r\n          Generate New Array\r\n        </Button>\r\n        <Button className=\"mr-3\" onClick={() => mergeSort()}>\r\n          Merge Sort\r\n        </Button>\r\n        <Button className=\"mr-3\" onClick={() => quickSort()}>\r\n          Quick Sort\r\n        </Button>\r\n        <Button className=\"mr-3\" onClick={() => heapSort()}>\r\n          Heap Sort\r\n        </Button>\r\n        <Button className=\"mr-3\" onClick={() => bubbleSort()}>\r\n          Bubble Sort\r\n        </Button>\r\n      </Navbar>\r\n    );\r\n}\r\n\r\nexport default Buttons;","export function checkAlgo(array, javaScriptSortedArray){\r\n\tif(array.length !== javaScriptSortedArray.length){\r\n\t\treturn false;\r\n\t}\r\n\tfor (let i = 0; i < array.length; i++){\r\n\t\tif (array[i] !== javaScriptSortedArray[i]){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport function swap(array, startIdx, endIdx){\r\n\tconst temp = array[startIdx];\r\n\tarray[startIdx] = array[endIdx];\r\n\tarray[endIdx] = temp;\r\n}","import { checkAlgo } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getMergeSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice(); // copy of a main array\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\tconsole.log(\"alog is correct(Marge Sort)? \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\r\n\tif (startIdx === endIdx){\r\n\t\treturn;\r\n\t}\r\n\tconst middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\tmergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n\tmergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n\tdoMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\r\n\tlet k = startIdx;\r\n\tlet i = startIdx;\r\n\tlet j = middleIdx + 1;\r\n\twhile(i <= middleIdx && j <= endIdx){\r\n\t\t//Index we are comparing, so we push them once to change their color\r\n\t\tanimations.push([i, j])\r\n\t\t// Index we are comparing, so we push them second tiem to revert their color\r\n\t\tanimations.push([i, j])\r\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]){\r\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\r\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++]\r\n\t\t} else {\r\n\t\t\t//we compair the ith element of auxiliary array with jth element of auxiliary array, and then replace in main array\r\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t}\r\n\twhile (i<=middleIdx){\r\n\t\t//Index we are comparing, so we push them once to change their color\r\n\t\tanimations.push([i, i])\r\n\t\t// Index we are comparing, so we push them second tiem to revert their color\r\n\t\tanimations.push([i, i])\r\n\t\t// We orverwrite the value at index k in the original array with the value at index i in the auxiliary array\r\n\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t}\r\n\twhile(j <= endIdx){\r\n\t\t//Index we are comparing, so we push them once to change their color\r\n\t\tanimations.push([j, j])\r\n\t\t// Index we are comparing, so we push them second tiem to revert their color\r\n\t\tanimations.push([j, j])\r\n\t\t// We orverwrite the value at index k in the original array with the value at index j in the auxiliary array\r\n\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t}\r\n}","import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getQuickSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\tquickSortHelper(auxiliaryArray, 0, array.length-1, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is correct?(Quick Sort) \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\n\r\nfunction quickSortHelper(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivot;\r\n\tif(startIdx < endIdx){\r\n\t\tpivot = partition(auxiliaryArray, startIdx, endIdx, animations);\r\n\t\tquickSortHelper(auxiliaryArray, startIdx, pivot - 1, animations);\r\n\t\tquickSortHelper(auxiliaryArray, pivot + 1, endIdx, animations);\r\n\t}\r\n}\r\n\r\nfunction partition(auxiliaryArray, startIdx, endIdx, animations){\r\n\tlet pivotIdx = randomIntFromInterval(startIdx, endIdx);\r\n\t// Index we are comparing, so we push them once to change their color\r\n\tanimations.push([pivotIdx, endIdx]);\r\n\t// Index we are comparing, so we push them second time to revert their color\r\n\tanimations.push([endIdx, pivotIdx]);\r\n\t// Index we are swaping with element\r\n\tanimations.push([pivotIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[pivotIdx]]);\r\n\r\n\tswap(auxiliaryArray, pivotIdx, endIdx);\r\n\r\n\tlet lessTailIdx = startIdx;\r\n\r\n\tfor (let i = startIdx; i< auxiliaryArray.length; i++){\r\n\t\tif (auxiliaryArray[i] < auxiliaryArray[endIdx]){\r\n\t\t\t// Index we are comparing, so we push them once to change their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are comparing, so we push them second time to revert their color\r\n\t\t\tanimations.push([i, lessTailIdx]);\r\n\t\t\t// Index we are swaping with element\r\n\t\t\tanimations.push([i, auxiliaryArray[lessTailIdx]]);\r\n\t\t\tanimations.push([lessTailIdx, auxiliaryArray[i]]);\r\n\r\n\t\t\tswap(auxiliaryArray, i, lessTailIdx);\r\n\t\t\tlessTailIdx++;\r\n\t\t}\r\n\t}\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, endIdx]);\r\n\tanimations.push([lessTailIdx, auxiliaryArray[endIdx]]);\r\n\tanimations.push([endIdx, auxiliaryArray[lessTailIdx]]);\r\n\tswap(auxiliaryArray, lessTailIdx, endIdx);\r\n\treturn lessTailIdx\r\n}","import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getHeapSortAnimations(array){\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\theapSortHelper(auxiliaryArray, array.length, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is Correct(Heap Sort)? \", checkAlgo(array, javaScriptSortedArray))\r\n\treturn animations;\r\n}\r\n\r\nfunction heapSortHelper(auxiliaryArray, arrLength, animations){\r\n\t// Build a maxheap\r\n\tconst midIdx = Math.floor((arrLength / 2) - 1);\r\n\tfor (let i = midIdx; i >= 0; i--){\r\n\t\theapify(auxiliaryArray, arrLength, i, animations);\r\n\t}\r\n\r\n\t// One by one  extract elements\r\n\tfor (let i = arrLength - 1; i > 0; i--){\r\n\t\tanimations.push([i, 0]);\r\n\t\tanimations.push([0, i]);\r\n\t\tanimations.push([i, auxiliaryArray[0]]);\r\n\t\tanimations.push([0, auxiliaryArray[i]])\r\n\t\tswap(auxiliaryArray, i, 0);\r\n\t\theapify(auxiliaryArray, i, 0, animations);\r\n\t}\r\n}\r\nfunction heapify(auxiliaryArray, arrLength, current, animations){\r\n\tlet largest = current; // Initialize largest as root\r\n\tconst left = 2 * current + 1; \r\n\tconst right = 2 * current + 2;\r\n\r\n\t// Check if left child of root exists and is greater than root\r\n\tif (left < arrLength && auxiliaryArray[current] < auxiliaryArray[left]){\r\n\t\tlargest = left;\r\n\t}\r\n\r\n\t// Check if right child of root exists and is greater than root\r\n\tif (right < arrLength && auxiliaryArray[largest] < auxiliaryArray[right]){\r\n\t\tlargest = right;\r\n\t}\r\n\r\n\t// Change root, if needed\r\n\tif (largest !== current){\r\n\t\tanimations.push([current, largest]);\r\n\t\tanimations.push([largest, current]);\r\n\t\tanimations.push([current, auxiliaryArray[largest]]);\r\n\t\tanimations.push([largest, auxiliaryArray[current]]);\r\n        swap(auxiliaryArray, current, largest);\r\n\t\theapify(auxiliaryArray, arrLength, largest, animations);\r\n\t}\r\n}","import { checkAlgo, swap } from \"../SortingComponents/SortingComponents\";\r\n\r\nexport function getBubbleSortAnimations(array){\r\n\tconst animations = [];\r\n\tif (array.length <= 1){\r\n\t\treturn array;\r\n\t}\r\n\tconst auxiliaryArray = array.slice();\r\n\tbubbleSortHelper(auxiliaryArray, array.length, animations);\r\n\tconst javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n\tarray = auxiliaryArray;\r\n\tconsole.log(\"alog is Correct (Bubble Sort)? \", checkAlgo(array, javaScriptSortedArray));\r\n\treturn animations;\r\n}\r\n\r\nfunction bubbleSortHelper(auxiliaryArray, arrLength, animations){\r\n\tfor(let i = 0; i < arrLength; i++){\r\n\t\tlet swapped = false;\r\n\t\tfor(let j = 0; j < arrLength - 1; j++){\r\n\t\t\tif (auxiliaryArray[j] > auxiliaryArray[j + 1]){\r\n\t\t\t\tanimations.push([j, j+1]);\r\n\t\t\t\tanimations.push([j + 1, j]);\r\n\t\t\t\tanimations.push([j, auxiliaryArray[j+1]]);\r\n\t\t\t\tanimations.push([j+1, auxiliaryArray[j]]);\r\n\t\t\t\tswap(auxiliaryArray, j, j+1);\r\n\t\t\t\tswapped = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!swapped){\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}","import React from 'react';\r\nimport SizeRange from '../SizeRange/SizeRange';\r\nimport Buttons from '../Buttons/Buttons';\r\nimport { getMergeSortAnimations } from '../Algorithms/MergeSortAnimation/MeargeSortAnimation';\r\nimport { getQuickSortAnimations } from '../Algorithms/QuickSortAnimation/QuickSortAnimation';\r\nimport { getHeapSortAnimations } from '../Algorithms/HeapSortAnimation/HeapSortAnimation';\r\nimport { getBubbleSortAnimations } from '../Algorithms/BubbleSortAnimation/BubbleSortAnimation';\r\nimport './SortingVisualizer.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass SortingVisualizer extends React.Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tarray: [],\r\n\t\t\tsize: 20,\r\n\t\t\tcolor: 'red',\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.resetArray(this.state.size);\r\n\t}\r\n\r\n\thandleOnChange = (value) => {\r\n\t\tthis.setState({size: value})\r\n\t}\r\n\r\n\tresetArray = (value) => {\r\n\t\tconst array = [];\r\n\t\tfor (let i = 0; i< value; i++){\r\n\t\t\tarray.push(randomIntFromInterval(5, 700));\r\n\t\t}\r\n\t\tthis.setState({array, color: 'green'});\r\n\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\tfor (let i = 0; i < arrayBars.length; i++){\r\n\t\t\tarrayBars[i].style.backgroundColor = this.state.color;\r\n\t\t}\r\n\t}\r\n\r\n\tmergeSort = () => {\r\n\t\tconst {array, size} = this.state;\r\n\t\tconst animations = getMergeSortAnimations(array);\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst isColorChange = i % 3 !== 2;\r\n\t\t\tif (isColorChange) {\r\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\r\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\r\n\t\t\t\tconst color = i % 3 === 0 ? \"red\" : \"purple\";\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\r\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\r\n\t\t\t\t}, (i * 500)/size);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.backgroundColor = \"turquoise\";\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, (i * 1000)/ size);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tquickSort = () => {\r\n\t\tconst { array, size } = this.state;\r\n\t\tconst animations = getQuickSortAnimations(array);\r\n\t\tfor (let i = 0; i < animations.length; i++){\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst isColorChange = i % 4 < 2;\r\n\t\t\tif (isColorChange){\r\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\r\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\r\n\t\t\t\tconst color = i % 4 === 0 ? 'red' : 'turquoise';\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\r\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\r\n\t\t\t\t}, (i * 1000)/size);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\t\r\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\r\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\r\n\t\t\t\t}, (i * 1000)/size);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\theapSort = () => {\r\n\t\tconst { array, size } = this.state;\r\n\t\tconst animations = getHeapSortAnimations(array);\r\n\t\tfor (let i = 0; i < animations.length; i++){\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst isColorChange = i % 4 < 2;\r\n\t\t\tif (isColorChange){\r\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\r\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\r\n\t\t\t\tconst color = i % 4 === 0 ? 'red' : 'turquoise';\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\r\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\r\n\t\t\t\t}, (i * 1000)/ size);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\r\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\r\n\t\t\t\t\t}, (i * 1000) / size);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tbubbleSort = () => {\r\n\t\tconst { array, size } = this.state;\r\n\t\tconst animations = getBubbleSortAnimations(array);\r\n\t\tfor (let i = 0; i < animations.length; i++){\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst isColorChange = i % 4 < 2;\r\n\t\t\tif (isColorChange) {\r\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i];\r\n\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style;\r\n\t\t\t\tconst color = i % 4 === 0 ? 'red' : 'turquoise';\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\r\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\r\n\t\t\t\t}, (i * 1000) / size);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i];\r\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\r\n\t\t\t\t\tbarOneStyle.backgroundColor = \"purple\";\r\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\r\n\t\t\t\t}, (i * 100) / size);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tconst {array} = this.state;\r\n\t\tlet { size } = this.state;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Buttons resetArray={this.resetArray} mergeSort = {this.mergeSort} quickSort = {this.quickSort} heapSort = {this.heapSort} bubbleSort = {this.bubbleSort} volume={size}/>\r\n\t\t\t\t<SizeRange state={this.state} resetArray={this.resetArray} />\r\n\t\t\t\t<div className=\"array-container\">\t\t\t\t\t\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tarray.map((value, idx) => (\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<div  \r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"array-bar\" \r\n\t\t\t\t\t\t\t\t\t\t\tkey={idx} \r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{height: `${value}px`, width: `${600/size}px`, background: this.state.color}}></div>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\nfunction randomIntFromInterval(min, max) {\r\n\treturn Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\nexport default SortingVisualizer;","import React from 'react';\r\nimport SortingVisualizer from './components/SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}